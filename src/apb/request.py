import base64
import docker
import os
import requests
import shutil
import urllib3

from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Disable insecure request warnings from both packages
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# TODO: Add logging everywhere to show progress with the apb command
# and to help debug where a problem occured
class Request(object):

    def __init__(self, kwargs):
        self.args = kwargs

        self.apb_spec_file = 'apb.yml'


    def _load_makefile(self, apb_dict, params):
        env = Environment(loader=FileSystemLoader(DAT_PATH), trim_blocks=True)
        template = env.get_template(EX_MAKEFILE)

        if not params:
            params = []

        return template.render(apb_dict=apb_dict, params=params)


    def _load_example_specfile(self, apb_dict, params):
        env = Environment(loader=FileSystemLoader(DAT_PATH), trim_blocks=True)
        template = env.get_template(EX_SPEC_FILE)

        if not params:
            params = []

        return template.render(apb_dict=apb_dict, params=params)


    def _write_file(self, file_out, destination, force):
        touch(destination, force)
        with open(destination, 'w') as outfile:
            outfile.write(''.join(file_out))


    def get_asb_route(self):
        '''
        Find the ansible-service-broker route.

        TODO: Add Kubernetes support by searching for an endpoint
        '''

        for route in self.route_list.items:
            if 'asb' in route.metadata.name and 'etcd' not in route.metadata.name:
                asb_route = route.spec.host

        url = "%s/%s" % (asb_route, self.routing_prefix)
        if url.find("http") < 0:
            url = "https://" + url

        return url


    def bootstrap(self):
        url = "%s/v2/bootstrap" % self.route
        response = requests.request("post", url, verify=self.verify,
                                    headers=self.headers)

        if response.status_code != 200:
            print("Error: Attempt to bootstrap Broker returned status: %d" % response.status_code)
            print("Unable to bootstrap Ansible Service Broker.")
            raise

        print("Successfully bootstrapped Ansible Service Broker")


    def apb_init(self):
        current_path = self.args['base_path']
        bindable = self.args['bindable']
        async = self.args['async']
        dockerhost = self.args['dockerhost']
        skip = {
            'provision': self.args['skip-provision'],
            'deprovision': self.args['skip-deprovision'],
            'bind': self.args['skip-bind'] or not self.args['bindable'],
            'unbind': self.args['skip-unbind'] or not self.args['bindable'],
            'roles': self.args['skip-roles']
        }

        apb_tag_arr = self.args['tag'].split('/')
        apb_name = apb_tag_arr[-1]
        app_org = apb_tag_arr[0]
        if apb_name.lower().endswith("-apb"):
            app_name = apb_name[:-4]
        else:
            app_name = apb_name

        description = "This is a sample application generated by apb init"

        apb_dict = {
            'name': apb_name,
            'app_name': app_name,
            'app_org': app_org,
            'description': description,
            'bindable': bindable,
            'async': async,
            'dockerhost': dockerhost
        }

        project = os.path.join(current_path, apb_name)

        if os.path.exists(project):
            if not self.args['force']:
                raise Exception('ERROR: Project directory: [%s] found and force option not specified' % project)
            shutil.rmtree(project)

        print("Initializing %s for an APB." % project)

        os.mkdir(project)

        spec_path = os.path.join(project, SPEC_FILE)
        dockerfile_path = os.path.join(os.path.join(project, DOCKERFILE))
        makefile_path = os.path.join(os.path.join(project, MAKEFILE))

        specfile_out = load_example_specfile(apb_dict, [])
        write_file(specfile_out, spec_path, self.args['force'])

        dockerfile_out = load_dockerfile(EX_DOCKERFILE_PATH)
        write_file(dockerfile_out, dockerfile_path, self.args['force'])

        makefile_out = load_makefile(apb_dict, [])
        write_file(makefile_out, makefile_path, self.args['force'])

        generate_playbook_files(project, skip, apb_dict)
        print("Successfully initialized project directory at: %s" % project)
        print("Please run *apb prepare* inside of this directory after editing files.")
